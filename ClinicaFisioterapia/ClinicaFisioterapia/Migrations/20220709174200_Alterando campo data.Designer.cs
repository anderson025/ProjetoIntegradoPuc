// <auto-generated />
using System;
using ClinicaFisioterapia.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicaFisioterapia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220709174200_Alterando campo data")]
    partial class Alterandocampodata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("ClinicaFisioterapia.Models.Agendamento", b =>
                {
                    b.Property<int>("IdAgendamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DataAgendamento")
                        .HasColumnType("text");

                    b.Property<int>("IdFuncionario")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdAgendamento");

                    b.HasIndex("IdFuncionario")
                        .IsUnique();

                    b.HasIndex("IdPaciente")
                        .IsUnique();

                    b.ToTable("Agendamento");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("Uf")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarteiraConvenio")
                        .HasColumnType("int");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Convenio")
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Profissao")
                        .HasColumnType("int");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<bool>("Situacao")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CarteiraConvenio")
                        .HasColumnType("int");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Convenio")
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Profissao")
                        .HasColumnType("int");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<bool>("Situacao")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Agendamento", b =>
                {
                    b.HasOne("ClinicaFisioterapia.Models.Funcionario", "Funcionario")
                        .WithOne("Agendamento")
                        .HasForeignKey("ClinicaFisioterapia.Models.Agendamento", "IdFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaFisioterapia.Models.Paciente", "Paciente")
                        .WithOne("Agendamento")
                        .HasForeignKey("ClinicaFisioterapia.Models.Agendamento", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Funcionario", b =>
                {
                    b.HasOne("ClinicaFisioterapia.Models.Endereco", "Endereco")
                        .WithOne("Funcionario")
                        .HasForeignKey("ClinicaFisioterapia.Models.Funcionario", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Paciente", b =>
                {
                    b.HasOne("ClinicaFisioterapia.Models.Endereco", "Endereco")
                        .WithOne("Paciente")
                        .HasForeignKey("ClinicaFisioterapia.Models.Paciente", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Endereco", b =>
                {
                    b.Navigation("Funcionario");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Funcionario", b =>
                {
                    b.Navigation("Agendamento");
                });

            modelBuilder.Entity("ClinicaFisioterapia.Models.Paciente", b =>
                {
                    b.Navigation("Agendamento");
                });
#pragma warning restore 612, 618
        }
    }
}
